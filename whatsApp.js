const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
require("dotenv").config();
const path = require("path");
const { default: axios } = require("axios");
const url = `https://api.telegram.org/bot${process.env.TOKEN}/sendMessage`;
const fs = require("fs");
const FormData = require('form-data');
const mongoose = require("mongoose")
const Chat = require("./Chat")
const prompt = require("./prompt")

const OPENAI_API_KEY = process.env.OPENAI_API_KEY

mongoose
    .connect("mongodb://localhost:27017/BotTibetskaya")
    .then(() => {
        console.log("Mongodb OK");
    })
    .catch((err) => {
        console.log("Mongodb Error", err);
    });

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "tibetskaya-bot"
    }),
    puppeteer: {
        headless: true,
        args: [
            "--no-sandbox",
            "--disable-setuid-sandbox", 
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--disable-extensions",
            "--disable-background-timer-throttling",
            "--disable-backgrounding-occluded-windows",
            "--disable-renderer-backgrounding",
            "--disable-features=TranslateUI",
            "--disable-web-security",
            "--no-first-run",
            "--no-default-browser-check"
        ],
        timeout: 90000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–æ 90 —Å–µ–∫—É–Ω–¥
        defaultViewport: null,
    },
    webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
    }
});

client.on("qr", (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on("authenticated", () => {
    console.log("‚úÖ Authenticated successfully!");
});

client.on("auth_failure", (msg) => {
    console.error("‚ùå Authentication failed:", msg);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
client.on('loading_screen', (percent, message) => {
    console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ WhatsApp:', percent + '%', message);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
client.on('change_state', state => {
    console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', state);
});

client.on("disconnected", (reason) => {
    console.log("‚ùå Client was logged out:", reason);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.log("üîÑ Attempting to reconnect...");
        client.initialize();
    }, 5000);
});

client.on("ready", () => {
    console.log("üöÄ Client is ready!");
    console.log("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!");
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const chatHistories = {};

const addChat = async (chatId) => {
    const chat = new Chat({
        chatId
    });

    await chat.save();
}

const removeChat = async (chatId) => {
    await Chat.deleteOne({ chatId });
}

client.on('message_create', (msg) => {
    if (msg.fromMe) {
        const chatId = msg.to;

        if (msg.body.toLocaleLowerCase().includes("–æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")) {
            addChat(chatId);
        }

        if (msg.body.toLocaleLowerCase().includes("–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")) {
            removeChat(chatId);
        }
    }
});

let uniqueUsersToday = new Set(); // –•—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
let messagesToTelegramToday = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram —Å–µ–≥–æ–¥–Ω—è
let lastCheckDate = new Date().toLocaleDateString(); // –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞
function resetCountersIfNeeded() {
    const currentDate = new Date().toLocaleDateString();
    if (lastCheckDate !== currentDate) {
        uniqueUsersToday.clear();
        messagesToTelegramToday = 0;
        lastCheckDate = currentDate;
    }
}

async function getGPTResponse(chatHistory, currentDate, isWeekend) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    const dateString = currentDate.toLocaleDateString('ru-RU', { weekday: 'long' });
    const promptWithDate = `${prompt.prompt}

–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è ${dateString}. ${isWeekend ? '–°–µ–≥–æ–¥–Ω—è –í–û–°–ö–†–ï–°–ï–ù–¨–ï - –º—ã –ù–ï –†–ê–ë–û–¢–ê–ï–ú –∏ –ù–ï –î–û–°–¢–ê–í–õ–Ø–ï–ú! –õ—é–±—ã–µ –∑–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.' : '–°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.'}`;

    console.log("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT –ø—Ä–æ–º–ø—Ç —Å –¥–∞—Ç–æ–π:", dateString);
    console.log("ü§ñ –≠—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:", isWeekend);
    console.log("ü§ñ –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç:", promptWithDate);
    console.log("ü§ñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:", chatHistory);
    const messages = [
        {
            role: "system",
            content: promptWithDate,
        },
        ...chatHistory // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    ];

    // console.log("messages = ", JSON.stringify(messages, null, 2)); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try {
        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4o-mini",
                messages,
            },
            {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${OPENAI_API_KEY}`,
                },
            }
        );
        return response.data.choices[0].message.content;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ gptResponse:", error);
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ OpenAI.";
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
function saveMessageToHistory(chatId, message, role) {
    if (!chatHistories[chatId]) {
        chatHistories[chatId] = [];
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ —Å —Ä–æ–ª—å—é
    chatHistories[chatId].push({
        role: role,
        content: message,
    });

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (16 —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ)
    if (chatHistories[chatId].length > 10) {
        chatHistories[chatId].shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 16
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
client.on("message", async (msg) => {
    try {
        console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:", msg.from);
        console.log("üìÑ –¢–µ–∫—Å—Ç:", msg.body || "[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]");
        
        resetCountersIfNeeded(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
        
        // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –¥–∞—Ç—É –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const currentDate = new Date();
        const currentDay = currentDate.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        const isWeekend = currentDay === 0;
        
        console.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate.toLocaleString('ru-RU')}`);
        console.log(`üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${currentDay} (0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)`);
        console.log(`üìÖ –≠—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: ${isWeekend}`);
        
        const chatId = msg.from;
        const chat = await Chat.findOne({chatId})

        if (chat) {
            console.log("üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞");
            return
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
        uniqueUsersToday.add(chatId);
        
        if (!msg.body) {
            console.log("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return;
        }
        
        if (msg.body.toLowerCase() === "–ø—Ä–æ–≤–µ—Ä–∫–∞") {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "–ü—Ä–æ–≤–µ—Ä–∫–∞", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            const response = `–ù–∞–ø–∏—Å–∞–ª–∏: ${uniqueUsersToday.size}.\nTelegram: ${messagesToTelegramToday}.`;
            client.sendMessage(chatId, response);
            return;
        }
        
        if (msg.hasMedia) {
            const media = await msg.downloadMedia();

            if (media.mimetype.startsWith("audio/")) {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                const filePath = path.join(__dirname, `/whatsAppAudio/audio_${Date.now()}.ogg`);

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                fs.writeFileSync(filePath, media.data, { encoding: "base64" });

                console.log(`–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ ${filePath}`);
                const CLIENT_NUMBER = chatId.slice(0, 11);
                const CLIENT_MESSAGE = `–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: +${CLIENT_NUMBER}\nhttps://wa.me/${CLIENT_NUMBER}`;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                sendAudioToTelegram(filePath, CLIENT_MESSAGE);
            } else {
                client.sendMessage(
                    chatId,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∂–µ –æ—Ç–ø–∞—Ä—å—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                );
            }
        } else if (msg.body) {
            saveMessageToHistory(chatId, msg.body, "user");
            if (
                msg.body.toLowerCase().includes("–∫–∞–Ω–∞") ||
                msg.body.toLowerCase().includes("–∫–∞–Ω–∞—Ç") ||
                msg.body.toLowerCase().includes("“õ–∞–Ω–∞—Ç")
            ) {
                const message =
                    "–ß—Ç–æ –±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ö–∞–Ω–∞—Ç–æ–º –ø—Ä–æ—à—É –≤–∞—Å –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n\nhttps://wa.me/77015315558";
                client.sendMessage(chatId, message);

                saveMessageToHistory(chatId, message, "assistant");
            } else if (msg.body.toLowerCase().includes("—Å—á–µ—Ç") || msg.body.toLowerCase().includes("—Å—á—ë—Ç")) {
                const CHAT_ID = "-1002433505684";
                const CLIENT_NUMBER = chatId.slice(0, 11);
                const CLIENT_MESSAGE = `–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É:\n–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: +${CLIENT_NUMBER}\nhttps://wa.me/${CLIENT_NUMBER}`;

                axios
                    .post(
                        url,
                        new URLSearchParams({
                            chat_id: CHAT_ID,
                            text: CLIENT_MESSAGE,
                        }).toString(),
                        {
                            headers: {
                                "Content-Type":
                                    "application/x-www-form-urlencoded",
                            },
                        }
                    )
                    .then((response) => {
                        console.log(
                            "Message sent successfully:",
                            response.data
                        );
                    })
                    .catch((error) => {
                        console.error("Error sending message:", error);
                    });

                client.sendMessage(chatId, "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.");

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                saveMessageToHistory(chatId, "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.", "assistant");
            } else {
                // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ GPT
                const gptResponse = await getGPTResponse(chatHistories[chatId], currentDate, isWeekend);
                
                if (!gptResponse) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT

                if (
                    (gptResponse.toLowerCase().includes("–∑–∞–∫–∞–∑") &&
                    gptResponse.toLowerCase().includes("–ø—Ä–∏–Ω—è—Ç")) || (gptResponse.toLowerCase().includes("–∑–∞–∫–∞–∑—ã“£—ã–∑") &&
                    gptResponse.toLowerCase().includes("“õ–∞–±—ã–ª–¥–∞–Ω–¥—ã"))
                ) {
                    console.log("‚úÖ GPT –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏");
                    console.log("üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ?", isWeekend);
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é isWeekend –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if (isWeekend) {
                        console.log("üìÖ –ó–∞–∫–∞–∑ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
                        client.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–∞ —á–∞—Å –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å!");
                        saveMessageToHistory(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–∞ —á–∞—Å –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å!", "assistant");
                    } else {
                        console.log("üìÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∫–∞–∫ –µ—Å—Ç—å");
                        client.sendMessage(chatId, gptResponse);
                        saveMessageToHistory(chatId, gptResponse, "assistant");
                    }
                } else {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    client.sendMessage(chatId, gptResponse);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    saveMessageToHistory(chatId, gptResponse, "assistant");
                }
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
});

async function sendAudioToTelegram(filePath, CLIENT_MESSAGE) {
    const formData = new FormData();
    formData.append("chat_id", "-1002433505684"); // ID —á–∞—Ç–∞
    formData.append("caption", CLIENT_MESSAGE)
    formData.append("audio", fs.createReadStream(filePath)); // –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª

    try {
        const response = await axios.post(
            `https://api.telegram.org/bot${process.env.TOKEN}/sendAudio`,
            formData,
            {
                headers: formData.getHeaders(),
            }
        );
        fs.unlinkSync(filePath);
        messagesToTelegramToday++;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –≤ Telegram:", error);
    }
}


client.initialize();